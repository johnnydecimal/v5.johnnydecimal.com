---
import { getCollection } from "astro:content";
import JDNavItem from "./JDNavItem.astro";
import version from "@js/version/version";
import jdSort from "@js/jdSort.js";

/**
 * # JDNavigation
 *
 * This component creates the JD site navigation block.
 *
 * It is called once by each site page. It is the overall wrapper and is
 * responsible for the ┌──┐ containing brackets top and bottom.
 *
 * It then generates a list of all site pages using `getCollection` and, after
 * a bit of filtering, sorting, and other tweaking, renders `JDNavItem` with
 * each of these pages.
 *
 * `JDNavItem` is responsible for generating each line of the navblock. This
 * component wraps everything in an `<ol>`, and JDNavItem wraps each of its
 * returns in a `<li>`.
 */

/**
 * Get all `sitePages` so we can pull out a list of pages which become the
 * navigation bar. We'll pass this down to `JDNavItem` shortly.
 *
 * We use a filter to exclude the root / page at
 * - content/site/index.mdx
 * because this same page is also 11.01, and we don't need it twice.
 *
 * We also exclude pages where `!data.excludeFromNav`, which is typically
 * our hidden pages at `90-99 Behind the scenes`.
 */
const sitePages = await getCollection("site", ({ slug, data }) => {
  return slug !== "index" && !data.excludeFromNav && data.publish;
});

/**
 * <JDNavItem> only needs a small subset of the information in `sitePages`.
 * - Number (for sorting and display)
 * - Title (for display)
 * - Slug (for linking)
 *
 * So we extract those, sort them by JD number, and map them on to
 * <JDNavItem>.
 */
interface NavItem {
  number: string;
  title: string;
  slug: string;
}

let sitePagesForNav: Array<NavItem> = [];

sitePages.map((page) => {
  sitePagesForNav.push({
    number: page.data.number,
    title: page.data.title,
    /**
     * We modify slug in two ways:
     * - Give it a leading slash: we use it as the hyperlink and without a
     *   trailing slash it appends to the current path rather than starting
     *   at the root of the domain.
     * - Give it a trailing slash: the behaviour can differ between local dev
     *   and Netlify deployment, and this normalises them.
     * - Astro's slug generator removes the period. I think it thinks it's
     *   removing a file extension. The result is that this:
     *   - `00-09-site-administration/01-about/01.01-colophon`
     *   - becomes this:
     *   - `00-09-site-administration/01-about/0101-colophon`
     *   - So we pop the period back in there with a bit of regex wizardry.
     */
    slug: "/" + page.slug.replace(/(\/\d\d)(\d\d)/, "$1.$2") + "/",
  });
});

sitePagesForNav.sort(jdSort);
---

<nav id="zero-zero-zero-zero">
  <div class="index-brackets index-brackets-top">
    <div>┌</div>
    <div class="index-brackets-horizontal-line">
      ─ Index
      ─────────────────────────────────────────────────────────────────────────────────
    </div>
    <div>┐</div>
  </div>
  <div class="index-main">
    <ol>
      {
        sitePagesForNav.map((page) => (
          <JDNavItem number={page.number} title={page.title} slug={page.slug} />
        ))
      }
    </ol>
  </div>
  <div class="index-brackets index-brackets-bottom">
    <div>└</div>
    <div class="index-brackets-horizontal-line">
      ───────────────────────────────────────────────────────────────────────────────────
    </div>
    <div>┘</div>
  </div>

  <div class="version">
    <a href="/00-09-site-administration/01-about/01.04-version/"
      >v{version.number}&nbsp;/&nbsp;<time
        id="time-last-updated"
        datetime={new Date().toISOString()}>{version.date}</time
      ></a
    >
  </div>
</nav>

<style lang="scss">
  @use "/src/styles/johnny" as *;

  nav {
    grid-area: nav;

    font-family: $monospace;

    border-top: 1px dashed $colour-800;
    padding: $medium $small;

    @include for-tablet-landscape-up {
      max-width: 40ch;

      margin: 0 auto $large 0;
      padding: 0;

      border-top: none;
    }

    @include for-print {
      display: none;
    }

    & ol {
      list-style-type: none;
      margin: 0;
      padding: 0;
    }

    & div.version {
      color: $colour-700;
      font-family: $monospace;
      font-size: 1.2rem;
      text-align: center;
    }
  }

  .index-main {
    margin: 0 auto;
    padding: 0 2ch;
    width: fit-content;
  }

  .index-brackets {
    display: grid;
    grid-auto-flow: column;
    white-space: nowrap;
    color: $colour-700;
  }
  .index-brackets-horizontal-line {
    overflow: hidden;
  }
  .index-brackets-top {
    margin-bottom: $small;
  }
  .index-brackets-bottom {
    margin-top: $small;
  }
</style>
